
STM32F103_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002540  08002540  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002540  08002540  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002540  08002540  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002540  08002540  00012540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08002554  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002554  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0ea  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c5c  00000000  00000000  0002c11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  0002dd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  0002ea90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017fbf  00000000  00000000  0002f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b185  00000000  00000000  0004767f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a524  00000000  00000000  00052804  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcd28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b8  00000000  00000000  000dcda4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080024d4 	.word	0x080024d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080024d4 	.word	0x080024d4

0800014c <LCD_SendDataToExpander>:

//
//	Send/Read data to/from expander function
//
void LCD_SendDataToExpander(uint8_t *Data)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c_lcd, LCD_I2C_ADDRESS, Data, 1, LCD_I2C_TIMEOUT);
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <LCD_SendDataToExpander+0x24>)
 8000156:	6818      	ldr	r0, [r3, #0]
 8000158:	230a      	movs	r3, #10
 800015a:	9300      	str	r3, [sp, #0]
 800015c:	2301      	movs	r3, #1
 800015e:	687a      	ldr	r2, [r7, #4]
 8000160:	214e      	movs	r1, #78	; 0x4e
 8000162:	f000 ffd5 	bl	8001110 <HAL_I2C_Master_Transmit>
}
 8000166:	bf00      	nop
 8000168:	3708      	adds	r7, #8
 800016a:	46bd      	mov	sp, r7
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	2000002c 	.word	0x2000002c

08000174 <LCD_SetDataPort>:

//
//	Set data port
//
static inline void LCD_SetDataPort(uint8_t Data)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	4603      	mov	r3, r0
 800017c:	71fb      	strb	r3, [r7, #7]
	ByteToExpander &= ~(0xF0); // Clear Data bits
 800017e:	4b1f      	ldr	r3, [pc, #124]	; (80001fc <LCD_SetDataPort+0x88>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	f003 030f 	and.w	r3, r3, #15
 8000186:	b2da      	uxtb	r2, r3
 8000188:	4b1c      	ldr	r3, [pc, #112]	; (80001fc <LCD_SetDataPort+0x88>)
 800018a:	701a      	strb	r2, [r3, #0]

	if(Data & (1<<0))
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	f003 0301 	and.w	r3, r3, #1
 8000192:	2b00      	cmp	r3, #0
 8000194:	d006      	beq.n	80001a4 <LCD_SetDataPort+0x30>
		ByteToExpander |= D4_BIT_MASK;
 8000196:	4b19      	ldr	r3, [pc, #100]	; (80001fc <LCD_SetDataPort+0x88>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	b2da      	uxtb	r2, r3
 80001a0:	4b16      	ldr	r3, [pc, #88]	; (80001fc <LCD_SetDataPort+0x88>)
 80001a2:	701a      	strb	r2, [r3, #0]

	if(Data & (1<<1))
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	f003 0302 	and.w	r3, r3, #2
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d006      	beq.n	80001bc <LCD_SetDataPort+0x48>
		ByteToExpander |= D5_BIT_MASK;
 80001ae:	4b13      	ldr	r3, [pc, #76]	; (80001fc <LCD_SetDataPort+0x88>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	f043 0320 	orr.w	r3, r3, #32
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	4b10      	ldr	r3, [pc, #64]	; (80001fc <LCD_SetDataPort+0x88>)
 80001ba:	701a      	strb	r2, [r3, #0]

	if(Data & (1<<2))
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f003 0304 	and.w	r3, r3, #4
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d006      	beq.n	80001d4 <LCD_SetDataPort+0x60>
		ByteToExpander |= D6_BIT_MASK;
 80001c6:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <LCD_SetDataPort+0x88>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <LCD_SetDataPort+0x88>)
 80001d2:	701a      	strb	r2, [r3, #0]

	if(Data & (1<<3))
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	f003 0308 	and.w	r3, r3, #8
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d006      	beq.n	80001ec <LCD_SetDataPort+0x78>
		ByteToExpander |= D7_BIT_MASK;
 80001de:	4b07      	ldr	r3, [pc, #28]	; (80001fc <LCD_SetDataPort+0x88>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <LCD_SetDataPort+0x88>)
 80001ea:	701a      	strb	r2, [r3, #0]

	LCD_SendDataToExpander(&ByteToExpander);
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <LCD_SetDataPort+0x88>)
 80001ee:	f7ff ffad 	bl	800014c <LCD_SendDataToExpander>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000028 	.word	0x20000028

08000200 <LCD_SetRS>:
//
//	Control signals
//
static inline void LCD_SetRS(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	ByteToExpander |= RS_BIT_MASK;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <LCD_SetRS+0x1c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	b2da      	uxtb	r2, r3
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <LCD_SetRS+0x1c>)
 8000210:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8000212:	4802      	ldr	r0, [pc, #8]	; (800021c <LCD_SetRS+0x1c>)
 8000214:	f7ff ff9a 	bl	800014c <LCD_SendDataToExpander>
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000028 	.word	0x20000028

08000220 <LCD_ClearRS>:

static inline void LCD_ClearRS(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	ByteToExpander &= ~(RS_BIT_MASK);
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <LCD_ClearRS+0x1c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	f023 0301 	bic.w	r3, r3, #1
 800022c:	b2da      	uxtb	r2, r3
 800022e:	4b03      	ldr	r3, [pc, #12]	; (800023c <LCD_ClearRS+0x1c>)
 8000230:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8000232:	4802      	ldr	r0, [pc, #8]	; (800023c <LCD_ClearRS+0x1c>)
 8000234:	f7ff ff8a 	bl	800014c <LCD_SendDataToExpander>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000028 	.word	0x20000028

08000240 <LCD_SetEN>:

static inline void LCD_SetEN(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	ByteToExpander |= EN_BIT_MASK;
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <LCD_SetEN+0x1c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <LCD_SetEN+0x1c>)
 8000250:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8000252:	4802      	ldr	r0, [pc, #8]	; (800025c <LCD_SetEN+0x1c>)
 8000254:	f7ff ff7a 	bl	800014c <LCD_SendDataToExpander>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028

08000260 <LCD_ClearEN>:

static inline void LCD_ClearEN(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	ByteToExpander &= ~(EN_BIT_MASK);
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <LCD_ClearEN+0x1c>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f023 0304 	bic.w	r3, r3, #4
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b03      	ldr	r3, [pc, #12]	; (800027c <LCD_ClearEN+0x1c>)
 8000270:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8000272:	4802      	ldr	r0, [pc, #8]	; (800027c <LCD_ClearEN+0x1c>)
 8000274:	f7ff ff6a 	bl	800014c <LCD_SendDataToExpander>
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000028 	.word	0x20000028

08000280 <LCD_ClearRW>:
	ByteToExpander |= RW_BIT_MASK;
	LCD_SendDataToExpander(&ByteToExpander);
}

static inline void LCD_ClearRW(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	ByteToExpander &= ~(RW_BIT_MASK);
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <LCD_ClearRW+0x1c>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	f023 0302 	bic.w	r3, r3, #2
 800028c:	b2da      	uxtb	r2, r3
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <LCD_ClearRW+0x1c>)
 8000290:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8000292:	4802      	ldr	r0, [pc, #8]	; (800029c <LCD_ClearRW+0x1c>)
 8000294:	f7ff ff5a 	bl	800014c <LCD_SendDataToExpander>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000028 	.word	0x20000028

080002a0 <LCD_BacklightOn>:
	ByteToExpander &= ~(BL_BIT_MASK);
	LCD_SendDataToExpander(&ByteToExpander);
}

void LCD_BacklightOn(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	ByteToExpander |= BL_BIT_MASK;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <LCD_BacklightOn+0x1c>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b03      	ldr	r3, [pc, #12]	; (80002bc <LCD_BacklightOn+0x1c>)
 80002b0:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 80002b2:	4802      	ldr	r0, [pc, #8]	; (80002bc <LCD_BacklightOn+0x1c>)
 80002b4:	f7ff ff4a 	bl	800014c <LCD_SendDataToExpander>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000028 	.word	0x20000028

080002c0 <LCD_WriteByte>:

//
//	Write byte to LCD
//
void LCD_WriteByte(uint8_t data)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]

	LCD_SetEN();
 80002ca:	f7ff ffb9 	bl	8000240 <LCD_SetEN>
	LCD_SetDataPort(data >> 4);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	091b      	lsrs	r3, r3, #4
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff4d 	bl	8000174 <LCD_SetDataPort>
	LCD_ClearEN();
 80002da:	f7ff ffc1 	bl	8000260 <LCD_ClearEN>
//	Delay_us(120);
	LCD_SetEN();
 80002de:	f7ff ffaf 	bl	8000240 <LCD_SetEN>
	LCD_SetDataPort(data);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ff45 	bl	8000174 <LCD_SetDataPort>
	LCD_ClearEN();
 80002ea:	f7ff ffb9 	bl	8000260 <LCD_ClearEN>

	Delay_us(120); // Wait for data processing
 80002ee:	2078      	movs	r0, #120	; 0x78
 80002f0:	f000 f8b6 	bl	8000460 <Delay_us>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <LCD_WriteCmd>:

//
//	Write command to LCD
//
void LCD_WriteCmd(uint8_t cmd)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	LCD_ClearRS();
 8000306:	f7ff ff8b 	bl	8000220 <LCD_ClearRS>
	LCD_WriteByte(cmd);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd7 	bl	80002c0 <LCD_WriteByte>
	Delay_us(1000); //<<--- wait for command processing
 8000312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000316:	f000 f8a3 	bl	8000460 <Delay_us>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <LCD_WriteData>:

//
//	Write data to LCD
//
void LCD_WriteData(uint8_t data)
{
 8000322:	b580      	push	{r7, lr}
 8000324:	b082      	sub	sp, #8
 8000326:	af00      	add	r7, sp, #0
 8000328:	4603      	mov	r3, r0
 800032a:	71fb      	strb	r3, [r7, #7]
	LCD_SetRS();
 800032c:	f7ff ff68 	bl	8000200 <LCD_SetRS>
	LCD_WriteByte(data);
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ffc4 	bl	80002c0 <LCD_WriteByte>
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <LCD_Char>:

//
//	Write one character to LCD
//
void LCD_Char(char c)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
	LCD_WriteData(((c >= 0x80) && (c <= 0x87)) ? (c & 0x07) : c);
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	2b00      	cmp	r3, #0
 8000350:	da07      	bge.n	8000362 <LCD_Char+0x22>
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b87      	cmp	r3, #135	; 0x87
 8000356:	d804      	bhi.n	8000362 <LCD_Char+0x22>
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	b2db      	uxtb	r3, r3
 8000360:	e000      	b.n	8000364 <LCD_Char+0x24>
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffdc 	bl	8000322 <LCD_WriteData>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <LCD_String>:

//
//	Write string to LCD
//
void LCD_String(char* str)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b084      	sub	sp, #16
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
	char c;
	while((c = *(str++)))
 800037a:	e003      	b.n	8000384 <LCD_String+0x12>
		LCD_Char(c);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ffde 	bl	8000340 <LCD_Char>
	while((c = *(str++)))
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	1c5a      	adds	r2, r3, #1
 8000388:	607a      	str	r2, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1f3      	bne.n	800037c <LCD_String+0xa>
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <LCD_Locate>:

//
// Set cursor for x-column, y-row
//
void LCD_Locate(uint8_t x, uint8_t y)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	460a      	mov	r2, r1
 80003a6:	71fb      	strb	r3, [r7, #7]
 80003a8:	4613      	mov	r3, r2
 80003aa:	71bb      	strb	r3, [r7, #6]
	switch(y)
 80003ac:	79bb      	ldrb	r3, [r7, #6]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <LCD_Locate+0x1c>
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d003      	beq.n	80003be <LCD_Locate+0x22>
 80003b6:	e005      	b.n	80003c4 <LCD_Locate+0x28>
	{
		case 0:
			y = LCD_LINE1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	71bb      	strb	r3, [r7, #6]
			break;
 80003bc:	e002      	b.n	80003c4 <LCD_Locate+0x28>
#if (LCD_Y>1)
		case 1:
			y = LCD_LINE2;
 80003be:	2340      	movs	r3, #64	; 0x40
 80003c0:	71bb      	strb	r3, [r7, #6]
			break;
 80003c2:	bf00      	nop
			y = LCD_LINE4;
			break;
#endif
	}

	LCD_WriteCmd((0x80 + y + x));
 80003c4:	79ba      	ldrb	r2, [r7, #6]
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	4413      	add	r3, r2
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	3b80      	subs	r3, #128	; 0x80
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff93 	bl	80002fc <LCD_WriteCmd>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <LCD_Cls>:

//
//	Clear LCD
//
void LCD_Cls(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
	LCD_WriteCmd(LCDC_CLS);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f7ff ff8a 	bl	80002fc <LCD_WriteCmd>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <LCD_Init>:

//
//	Initialization
//
void LCD_Init(I2C_HandleTypeDef *hi2c)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	hi2c_lcd = hi2c;
 80003f4:	4a19      	ldr	r2, [pc, #100]	; (800045c <LCD_Init+0x70>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6013      	str	r3, [r2, #0]

	LCD_BacklightOn();
 80003fa:	f7ff ff51 	bl	80002a0 <LCD_BacklightOn>
	LCD_ClearRS();
 80003fe:	f7ff ff0f 	bl	8000220 <LCD_ClearRS>
	LCD_ClearEN();
 8000402:	f7ff ff2d 	bl	8000260 <LCD_ClearEN>
	LCD_ClearRW();
 8000406:	f7ff ff3b 	bl	8000280 <LCD_ClearRW>

	HAL_Delay(15);
 800040a:	200f      	movs	r0, #15
 800040c:	f000 fad0 	bl	80009b0 <HAL_Delay>

	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 8000410:	2030      	movs	r0, #48	; 0x30
 8000412:	f7ff feaf 	bl	8000174 <LCD_SetDataPort>
	Delay_us(4100);
 8000416:	f241 0004 	movw	r0, #4100	; 0x1004
 800041a:	f000 f821 	bl	8000460 <Delay_us>
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 800041e:	2030      	movs	r0, #48	; 0x30
 8000420:	f7ff fea8 	bl	8000174 <LCD_SetDataPort>
	Delay_us(100);
 8000424:	2064      	movs	r0, #100	; 0x64
 8000426:	f000 f81b 	bl	8000460 <Delay_us>
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC4B); //4-byte mode
 800042a:	2020      	movs	r0, #32
 800042c:	f7ff fea2 	bl	8000174 <LCD_SetDataPort>
	Delay_us(100);
 8000430:	2064      	movs	r0, #100	; 0x64
 8000432:	f000 f815 	bl	8000460 <Delay_us>
	LCD_WriteCmd(LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7); // 4-bit, 2 lanes, 5x7 chars
 8000436:	2028      	movs	r0, #40	; 0x28
 8000438:	f7ff ff60 	bl	80002fc <LCD_WriteCmd>

	LCD_WriteCmd(LCDC_ONOFF|LCDC_CURSOROFF); // Cursor off
 800043c:	2008      	movs	r0, #8
 800043e:	f7ff ff5d 	bl	80002fc <LCD_WriteCmd>
	LCD_WriteCmd(LCDC_ONOFF|LCDC_DISPLAYON); // LCD on
 8000442:	200c      	movs	r0, #12
 8000444:	f7ff ff5a 	bl	80002fc <LCD_WriteCmd>
	LCD_WriteCmd(LCDC_ENTRY|LCDC_ENTRYR); // Data entry right
 8000448:	2006      	movs	r0, #6
 800044a:	f7ff ff57 	bl	80002fc <LCD_WriteCmd>

	LCD_Cls(); // Clear display
 800044e:	f7ff ffc6 	bl	80003de <LCD_Cls>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000002c 	.word	0x2000002c

08000460 <Delay_us>:
#include "tim.h"

#include "delays.h"

void Delay_us(uint16_t us)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	80fb      	strh	r3, [r7, #6]
	DELAY_US_TIMER.Instance->CNT = 0;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <Delay_us+0x2c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2200      	movs	r2, #0
 8000470:	625a      	str	r2, [r3, #36]	; 0x24
	while(DELAY_US_TIMER.Instance->CNT <= us);
 8000472:	bf00      	nop
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <Delay_us+0x2c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	429a      	cmp	r2, r3
 800047e:	d9f9      	bls.n	8000474 <Delay_us+0x14>
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000084 	.word	0x20000084

08000490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a4:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_GPIO_Init+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a1d      	ldr	r2, [pc, #116]	; (8000520 <MX_GPIO_Init+0x90>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <MX_GPIO_Init+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <MX_GPIO_Init+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a17      	ldr	r2, [pc, #92]	; (8000520 <MX_GPIO_Init+0x90>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_GPIO_Init+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_GPIO_Init+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a11      	ldr	r2, [pc, #68]	; (8000520 <MX_GPIO_Init+0x90>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_GPIO_Init+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	480c      	ldr	r0, [pc, #48]	; (8000524 <MX_GPIO_Init+0x94>)
 80004f4:	f000 fcbc 	bl	8000e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <MX_GPIO_Init+0x94>)
 8000512:	f000 fb53 	bl	8000bbc <HAL_GPIO_Init>

}
 8000516:	bf00      	nop
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	40011000 	.word	0x40011000

08000528 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_I2C1_Init+0x50>)
 800052e:	4a13      	ldr	r2, [pc, #76]	; (800057c <MX_I2C1_Init+0x54>)
 8000530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_I2C1_Init+0x50>)
 8000534:	4a12      	ldr	r2, [pc, #72]	; (8000580 <MX_I2C1_Init+0x58>)
 8000536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_I2C1_Init+0x50>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_I2C1_Init+0x50>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_I2C1_Init+0x50>)
 8000546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800054a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_I2C1_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_I2C1_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <MX_I2C1_Init+0x50>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_I2C1_Init+0x50>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_I2C1_Init+0x50>)
 8000566:	f000 fc9b 	bl	8000ea0 <HAL_I2C_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000570:	f000 f8c5 	bl	80006fe <Error_Handler>
  }

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000030 	.word	0x20000030
 800057c:	40005400 	.word	0x40005400
 8000580:	000186a0 	.word	0x000186a0

08000584 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <HAL_I2C_MspInit+0x70>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d123      	bne.n	80005ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0308 	and.w	r3, r3, #8
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005bc:	23c0      	movs	r3, #192	; 0xc0
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005c0:	2312      	movs	r3, #18
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <HAL_I2C_MspInit+0x78>)
 80005d0:	f000 faf4 	bl	8000bbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005de:	61d3      	str	r3, [r2, #28]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40005400 	.word	0x40005400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010c00 	.word	0x40010c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 f972 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f838 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f7ff ff40 	bl	8000490 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000610:	f7ff ff8a 	bl	8000528 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000614:	f000 f8d8 	bl	80007c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000618:	4813      	ldr	r0, [pc, #76]	; (8000668 <main+0x68>)
 800061a:	f001 fcd7 	bl	8001fcc <HAL_TIM_Base_Start>
  LCD_Init(&hi2c1);
 800061e:	4813      	ldr	r0, [pc, #76]	; (800066c <main+0x6c>)
 8000620:	f7ff fee4 	bl	80003ec <LCD_Init>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062a:	4811      	ldr	r0, [pc, #68]	; (8000670 <main+0x70>)
 800062c:	f000 fc20 	bl	8000e70 <HAL_GPIO_WritePin>
  	  // Measurement start
  	  LCD_Cls();
 8000630:	f7ff fed5 	bl	80003de <LCD_Cls>
  	  LCD_Locate(0,0);
 8000634:	2100      	movs	r1, #0
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff feb0 	bl	800039c <LCD_Locate>
  	  LCD_String(" STM32 + HD44780");
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <main+0x74>)
 800063e:	f7ff fe98 	bl	8000372 <LCD_String>
  	  LCD_Locate(0,1);
 8000642:	2101      	movs	r1, #1
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff fea9 	bl	800039c <LCD_Locate>
  	  LCD_String("www.msalamon.pl ");
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0x78>)
 800064c:	f7ff fe91 	bl	8000372 <LCD_String>
  	  // Measurement end
  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <main+0x70>)
 8000658:	f000 fc0a 	bl	8000e70 <HAL_GPIO_WritePin>
  	  HAL_Delay(500);
 800065c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000660:	f000 f9a6 	bl	80009b0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x64>
 8000666:	bf00      	nop
 8000668:	20000084 	.word	0x20000084
 800066c:	20000030 	.word	0x20000030
 8000670:	40011000 	.word	0x40011000
 8000674:	080024ec 	.word	0x080024ec
 8000678:	08002500 	.word	0x08002500

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	; 0x40
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2228      	movs	r2, #40	; 0x28
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 ff1a 	bl	80024c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f82d 	bl	800171c <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006c8:	f000 f819 	bl	80006fe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fa98 	bl	8001c1c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006f2:	f000 f804 	bl	80006fe <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3740      	adds	r7, #64	; 0x40
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000702:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x6>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_MspInit+0x5c>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <HAL_MspInit+0x5c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_MspInit+0x5c>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x5c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_MspInit+0x5c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_MspInit+0x5c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_MspInit+0x60>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_MspInit+0x60>)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000
 8000768:	40010000 	.word	0x40010000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b2:	f000 f8e1 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}

080007ba <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_TIM3_Init+0x94>)
 80007e6:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <MX_TIM3_Init+0x98>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_TIM3_Init+0x94>)
 80007ec:	223f      	movs	r2, #63	; 0x3f
 80007ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_TIM3_Init+0x94>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_TIM3_Init+0x94>)
 80007f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_TIM3_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_TIM3_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_TIM3_Init+0x94>)
 800080c:	f001 fb8e 	bl	8001f2c <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000816:	f7ff ff72 	bl	80006fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_TIM3_Init+0x94>)
 8000828:	f001 fc1a 	bl	8002060 <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000832:	f7ff ff64 	bl	80006fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_TIM3_Init+0x94>)
 8000844:	f001 fdbc 	bl	80023c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800084e:	f7ff ff56 	bl	80006fe <Error_Handler>
  }

}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000084 	.word	0x20000084
 8000860:	40000400 	.word	0x40000400

08000864 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a09      	ldr	r2, [pc, #36]	; (8000898 <HAL_TIM_Base_MspInit+0x34>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10b      	bne.n	800088e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_TIM_Base_MspInit+0x38>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_TIM_Base_MspInit+0x38>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_TIM_Base_MspInit+0x38>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40000400 	.word	0x40000400
 800089c:	40021000 	.word	0x40021000

080008a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008a2:	e003      	b.n	80008ac <LoopCopyDataInit>

080008a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008aa:	3104      	adds	r1, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008b4:	d3f6      	bcc.n	80008a4 <CopyDataInit>
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008b8:	e002      	b.n	80008c0 <LoopFillZerobss>

080008ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008bc:	f842 3b04 	str.w	r3, [r2], #4

080008c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008c4:	d3f9      	bcc.n	80008ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008c6:	f7ff ff78 	bl	80007ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f001 fdd7 	bl	800247c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ce:	f7ff fe97 	bl	8000600 <main>
  bx lr
 80008d2:	4770      	bx	lr
  ldr r3, =_sidata
 80008d4:	08002548 	.word	0x08002548
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008e0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008e4:	200000d0 	.word	0x200000d0

080008e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f929 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fefe 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f933 	bl	8000ba2 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f909 	bl	8000b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a03      	ldr	r2, [pc, #12]	; (8000998 <HAL_IncTick+0x20>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000008 	.word	0x20000008
 8000998:	200000cc 	.word	0x200000cc

0800099c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	200000cc 	.word	0x200000cc

080009b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff fff0 	bl	800099c <HAL_GetTick>
 80009bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c8:	d005      	beq.n	80009d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_Delay+0x40>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d6:	bf00      	nop
 80009d8:	f7ff ffe0 	bl	800099c <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8f7      	bhi.n	80009d8 <HAL_Delay+0x28>
  {
  }
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff90 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff49 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff5e 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff90 	bl	8000aac <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5f 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffb0 	bl	8000b10 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b08b      	sub	sp, #44	; 0x2c
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	e127      	b.n	8000e20 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	f040 8116 	bne.w	8000e1a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b12      	cmp	r3, #18
 8000bf4:	d034      	beq.n	8000c60 <HAL_GPIO_Init+0xa4>
 8000bf6:	2b12      	cmp	r3, #18
 8000bf8:	d80d      	bhi.n	8000c16 <HAL_GPIO_Init+0x5a>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d02b      	beq.n	8000c56 <HAL_GPIO_Init+0x9a>
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d804      	bhi.n	8000c0c <HAL_GPIO_Init+0x50>
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d031      	beq.n	8000c6a <HAL_GPIO_Init+0xae>
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d01c      	beq.n	8000c44 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c0a:	e048      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d043      	beq.n	8000c98 <HAL_GPIO_Init+0xdc>
 8000c10:	2b11      	cmp	r3, #17
 8000c12:	d01b      	beq.n	8000c4c <HAL_GPIO_Init+0x90>
          break;
 8000c14:	e043      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c16:	4a89      	ldr	r2, [pc, #548]	; (8000e3c <HAL_GPIO_Init+0x280>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d026      	beq.n	8000c6a <HAL_GPIO_Init+0xae>
 8000c1c:	4a87      	ldr	r2, [pc, #540]	; (8000e3c <HAL_GPIO_Init+0x280>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d806      	bhi.n	8000c30 <HAL_GPIO_Init+0x74>
 8000c22:	4a87      	ldr	r2, [pc, #540]	; (8000e40 <HAL_GPIO_Init+0x284>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d020      	beq.n	8000c6a <HAL_GPIO_Init+0xae>
 8000c28:	4a86      	ldr	r2, [pc, #536]	; (8000e44 <HAL_GPIO_Init+0x288>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d01d      	beq.n	8000c6a <HAL_GPIO_Init+0xae>
          break;
 8000c2e:	e036      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c30:	4a85      	ldr	r2, [pc, #532]	; (8000e48 <HAL_GPIO_Init+0x28c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d019      	beq.n	8000c6a <HAL_GPIO_Init+0xae>
 8000c36:	4a85      	ldr	r2, [pc, #532]	; (8000e4c <HAL_GPIO_Init+0x290>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d016      	beq.n	8000c6a <HAL_GPIO_Init+0xae>
 8000c3c:	4a84      	ldr	r2, [pc, #528]	; (8000e50 <HAL_GPIO_Init+0x294>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d013      	beq.n	8000c6a <HAL_GPIO_Init+0xae>
          break;
 8000c42:	e02c      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	623b      	str	r3, [r7, #32]
          break;
 8000c4a:	e028      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	3304      	adds	r3, #4
 8000c52:	623b      	str	r3, [r7, #32]
          break;
 8000c54:	e023      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e01e      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	330c      	adds	r3, #12
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e019      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c72:	2304      	movs	r3, #4
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e012      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d105      	bne.n	8000c8c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c80:	2308      	movs	r3, #8
 8000c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	611a      	str	r2, [r3, #16]
          break;
 8000c8a:	e008      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	615a      	str	r2, [r3, #20]
          break;
 8000c96:	e002      	b.n	8000c9e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	2bff      	cmp	r3, #255	; 0xff
 8000ca2:	d801      	bhi.n	8000ca8 <HAL_GPIO_Init+0xec>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	e001      	b.n	8000cac <HAL_GPIO_Init+0xf0>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3304      	adds	r3, #4
 8000cac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	2bff      	cmp	r3, #255	; 0xff
 8000cb2:	d802      	bhi.n	8000cba <HAL_GPIO_Init+0xfe>
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	e002      	b.n	8000cc0 <HAL_GPIO_Init+0x104>
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3b08      	subs	r3, #8
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	6a39      	ldr	r1, [r7, #32]
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 8096 	beq.w	8000e1a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cee:	4b59      	ldr	r3, [pc, #356]	; (8000e54 <HAL_GPIO_Init+0x298>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4a58      	ldr	r2, [pc, #352]	; (8000e54 <HAL_GPIO_Init+0x298>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6193      	str	r3, [r2, #24]
 8000cfa:	4b56      	ldr	r3, [pc, #344]	; (8000e54 <HAL_GPIO_Init+0x298>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d06:	4a54      	ldr	r2, [pc, #336]	; (8000e58 <HAL_GPIO_Init+0x29c>)
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4013      	ands	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4b      	ldr	r2, [pc, #300]	; (8000e5c <HAL_GPIO_Init+0x2a0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d013      	beq.n	8000d5a <HAL_GPIO_Init+0x19e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <HAL_GPIO_Init+0x2a4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x19a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <HAL_GPIO_Init+0x2a8>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x196>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a48      	ldr	r2, [pc, #288]	; (8000e68 <HAL_GPIO_Init+0x2ac>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x192>
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x1a0>
 8000d4e:	2304      	movs	r3, #4
 8000d50:	e004      	b.n	8000d5c <HAL_GPIO_Init+0x1a0>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_Init+0x1a0>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x1a0>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5e:	f002 0203 	and.w	r2, r2, #3
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4093      	lsls	r3, r2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d6c:	493a      	ldr	r1, [pc, #232]	; (8000e58 <HAL_GPIO_Init+0x29c>)
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d006      	beq.n	8000d94 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d86:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4938      	ldr	r1, [pc, #224]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]
 8000d92:	e006      	b.n	8000da2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d94:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	4933      	ldr	r1, [pc, #204]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	492e      	ldr	r1, [pc, #184]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	604b      	str	r3, [r1, #4]
 8000dba:	e006      	b.n	8000dca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	4929      	ldr	r1, [pc, #164]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	4924      	ldr	r1, [pc, #144]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	608b      	str	r3, [r1, #8]
 8000de2:	e006      	b.n	8000df2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	491f      	ldr	r1, [pc, #124]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	491a      	ldr	r1, [pc, #104]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60cb      	str	r3, [r1, #12]
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4915      	ldr	r1, [pc, #84]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f47f aed0 	bne.w	8000bd0 <HAL_GPIO_Init+0x14>
  }
}
 8000e30:	bf00      	nop
 8000e32:	372c      	adds	r7, #44	; 0x2c
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	10210000 	.word	0x10210000
 8000e40:	10110000 	.word	0x10110000
 8000e44:	10120000 	.word	0x10120000
 8000e48:	10310000 	.word	0x10310000
 8000e4c:	10320000 	.word	0x10320000
 8000e50:	10220000 	.word	0x10220000
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40011400 	.word	0x40011400
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e8c:	e003      	b.n	8000e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	041a      	lsls	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	611a      	str	r2, [r3, #16]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e11f      	b.n	80010f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d106      	bne.n	8000ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fb5c 	bl	8000584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2224      	movs	r2, #36	; 0x24
 8000ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f04:	f000 ffe0 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8000f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4a7b      	ldr	r2, [pc, #492]	; (80010fc <HAL_I2C_Init+0x25c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d807      	bhi.n	8000f24 <HAL_I2C_Init+0x84>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4a7a      	ldr	r2, [pc, #488]	; (8001100 <HAL_I2C_Init+0x260>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	bf94      	ite	ls
 8000f1c:	2301      	movls	r3, #1
 8000f1e:	2300      	movhi	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	e006      	b.n	8000f32 <HAL_I2C_Init+0x92>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4a77      	ldr	r2, [pc, #476]	; (8001104 <HAL_I2C_Init+0x264>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	bf94      	ite	ls
 8000f2c:	2301      	movls	r3, #1
 8000f2e:	2300      	movhi	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e0db      	b.n	80010f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4a72      	ldr	r2, [pc, #456]	; (8001108 <HAL_I2C_Init+0x268>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0c9b      	lsrs	r3, r3, #18
 8000f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	4a64      	ldr	r2, [pc, #400]	; (80010fc <HAL_I2C_Init+0x25c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d802      	bhi.n	8000f74 <HAL_I2C_Init+0xd4>
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3301      	adds	r3, #1
 8000f72:	e009      	b.n	8000f88 <HAL_I2C_Init+0xe8>
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	4a63      	ldr	r2, [pc, #396]	; (800110c <HAL_I2C_Init+0x26c>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	099b      	lsrs	r3, r3, #6
 8000f86:	3301      	adds	r3, #1
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	4956      	ldr	r1, [pc, #344]	; (80010fc <HAL_I2C_Init+0x25c>)
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	d80d      	bhi.n	8000fc4 <HAL_I2C_Init+0x124>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	1e59      	subs	r1, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	bf38      	it	cc
 8000fc0:	2304      	movcc	r3, #4
 8000fc2:	e04f      	b.n	8001064 <HAL_I2C_Init+0x1c4>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d111      	bne.n	8000ff0 <HAL_I2C_Init+0x150>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1e58      	subs	r0, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6859      	ldr	r1, [r3, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	440b      	add	r3, r1
 8000fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2301      	moveq	r3, #1
 8000fea:	2300      	movne	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	e012      	b.n	8001016 <HAL_I2C_Init+0x176>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	1e58      	subs	r0, r3, #1
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6859      	ldr	r1, [r3, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	0099      	lsls	r1, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	fbb0 f3f3 	udiv	r3, r0, r3
 8001006:	3301      	adds	r3, #1
 8001008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf0c      	ite	eq
 8001010:	2301      	moveq	r3, #1
 8001012:	2300      	movne	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_I2C_Init+0x17e>
 800101a:	2301      	movs	r3, #1
 800101c:	e022      	b.n	8001064 <HAL_I2C_Init+0x1c4>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10e      	bne.n	8001044 <HAL_I2C_Init+0x1a4>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	1e58      	subs	r0, r3, #1
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6859      	ldr	r1, [r3, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	440b      	add	r3, r1
 8001034:	fbb0 f3f3 	udiv	r3, r0, r3
 8001038:	3301      	adds	r3, #1
 800103a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001042:	e00f      	b.n	8001064 <HAL_I2C_Init+0x1c4>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1e58      	subs	r0, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6859      	ldr	r1, [r3, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	0099      	lsls	r1, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	fbb0 f3f3 	udiv	r3, r0, r3
 800105a:	3301      	adds	r3, #1
 800105c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	6809      	ldr	r1, [r1, #0]
 8001068:	4313      	orrs	r3, r2
 800106a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69da      	ldr	r2, [r3, #28]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6911      	ldr	r1, [r2, #16]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68d2      	ldr	r2, [r2, #12]
 800109e:	4311      	orrs	r1, r2
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	430b      	orrs	r3, r1
 80010a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0201 	orr.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2220      	movs	r2, #32
 80010de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	000186a0 	.word	0x000186a0
 8001100:	001e847f 	.word	0x001e847f
 8001104:	003d08ff 	.word	0x003d08ff
 8001108:	431bde83 	.word	0x431bde83
 800110c:	10624dd3 	.word	0x10624dd3

08001110 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	461a      	mov	r2, r3
 800111c:	460b      	mov	r3, r1
 800111e:	817b      	strh	r3, [r7, #10]
 8001120:	4613      	mov	r3, r2
 8001122:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff fc3a 	bl	800099c <HAL_GetTick>
 8001128:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b20      	cmp	r3, #32
 8001134:	f040 80e0 	bne.w	80012f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2319      	movs	r3, #25
 800113e:	2201      	movs	r2, #1
 8001140:	4970      	ldr	r1, [pc, #448]	; (8001304 <HAL_I2C_Master_Transmit+0x1f4>)
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 f964 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800114e:	2302      	movs	r3, #2
 8001150:	e0d3      	b.n	80012fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_I2C_Master_Transmit+0x50>
 800115c:	2302      	movs	r3, #2
 800115e:	e0cc      	b.n	80012fa <HAL_I2C_Master_Transmit+0x1ea>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b01      	cmp	r3, #1
 8001174:	d007      	beq.n	8001186 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0201 	orr.w	r2, r2, #1
 8001184:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001194:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2221      	movs	r2, #33	; 0x21
 800119a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2210      	movs	r2, #16
 80011a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	893a      	ldrh	r2, [r7, #8]
 80011b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011bc:	b29a      	uxth	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4a50      	ldr	r2, [pc, #320]	; (8001308 <HAL_I2C_Master_Transmit+0x1f8>)
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011c8:	8979      	ldrh	r1, [r7, #10]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	6a3a      	ldr	r2, [r7, #32]
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f000 f89c 	bl	800130c <I2C_MasterRequestWrite>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e08d      	b.n	80012fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80011f4:	e066      	b.n	80012c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	6a39      	ldr	r1, [r7, #32]
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f9de 	bl	80015bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00d      	beq.n	8001222 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2b04      	cmp	r3, #4
 800120c:	d107      	bne.n	800121e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800121c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06b      	b.n	80012fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123c:	b29b      	uxth	r3, r3
 800123e:	3b01      	subs	r3, #1
 8001240:	b29a      	uxth	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124a:	3b01      	subs	r3, #1
 800124c:	b29a      	uxth	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b04      	cmp	r3, #4
 800125e:	d11b      	bne.n	8001298 <HAL_I2C_Master_Transmit+0x188>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001264:	2b00      	cmp	r3, #0
 8001266:	d017      	beq.n	8001298 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001282:	b29b      	uxth	r3, r3
 8001284:	3b01      	subs	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001290:	3b01      	subs	r3, #1
 8001292:	b29a      	uxth	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	6a39      	ldr	r1, [r7, #32]
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f9ce 	bl	800163e <I2C_WaitOnBTFFlagUntilTimeout>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00d      	beq.n	80012c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d107      	bne.n	80012c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e01a      	b.n	80012fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d194      	bne.n	80011f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2220      	movs	r2, #32
 80012e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e000      	b.n	80012fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80012f8:	2302      	movs	r3, #2
  }
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	00100002 	.word	0x00100002
 8001308:	ffff0000 	.word	0xffff0000

0800130c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af02      	add	r7, sp, #8
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	460b      	mov	r3, r1
 800131a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d006      	beq.n	8001336 <I2C_MasterRequestWrite+0x2a>
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d003      	beq.n	8001336 <I2C_MasterRequestWrite+0x2a>
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001334:	d108      	bne.n	8001348 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e00b      	b.n	8001360 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	2b12      	cmp	r3, #18
 800134e:	d107      	bne.n	8001360 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800135e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 f84f 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00d      	beq.n	8001394 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001386:	d103      	bne.n	8001390 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e035      	b.n	8001400 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d108      	bne.n	80013b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	e01b      	b.n	80013e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80013b0:	897b      	ldrh	r3, [r7, #10]
 80013b2:	11db      	asrs	r3, r3, #7
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f003 0306 	and.w	r3, r3, #6
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f063 030f 	orn	r3, r3, #15
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <I2C_MasterRequestWrite+0xfc>)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f875 	bl	80014be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e010      	b.n	8001400 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80013de:	897b      	ldrh	r3, [r7, #10]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <I2C_MasterRequestWrite+0x100>)
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f865 	bl	80014be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	00010008 	.word	0x00010008
 800140c:	00010002 	.word	0x00010002

08001410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4613      	mov	r3, r2
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001420:	e025      	b.n	800146e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d021      	beq.n	800146e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800142a:	f7ff fab7 	bl	800099c <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d302      	bcc.n	8001440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d116      	bne.n	800146e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f043 0220 	orr.w	r2, r3, #32
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e023      	b.n	80014b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10d      	bne.n	8001494 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4013      	ands	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	bf0c      	ite	eq
 800148a:	2301      	moveq	r3, #1
 800148c:	2300      	movne	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	e00c      	b.n	80014ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4013      	ands	r3, r2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf0c      	ite	eq
 80014a6:	2301      	moveq	r3, #1
 80014a8:	2300      	movne	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d0b6      	beq.n	8001422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014cc:	e051      	b.n	8001572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014dc:	d123      	bne.n	8001526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f043 0204 	orr.w	r2, r3, #4
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e046      	b.n	80015b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d021      	beq.n	8001572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800152e:	f7ff fa35 	bl	800099c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	d302      	bcc.n	8001544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d116      	bne.n	8001572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f043 0220 	orr.w	r2, r3, #32
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e020      	b.n	80015b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d10c      	bne.n	8001596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4013      	ands	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	e00b      	b.n	80015ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	43da      	mvns	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4013      	ands	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf14      	ite	ne
 80015a8:	2301      	movne	r3, #1
 80015aa:	2300      	moveq	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d18d      	bne.n	80014ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015c8:	e02d      	b.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f878 	bl	80016c0 <I2C_IsAcknowledgeFailed>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e02d      	b.n	8001636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d021      	beq.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e2:	f7ff f9db 	bl	800099c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d302      	bcc.n	80015f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d116      	bne.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f043 0220 	orr.w	r2, r3, #32
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e007      	b.n	8001636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001630:	2b80      	cmp	r3, #128	; 0x80
 8001632:	d1ca      	bne.n	80015ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800164a:	e02d      	b.n	80016a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f837 	bl	80016c0 <I2C_IsAcknowledgeFailed>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e02d      	b.n	80016b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001662:	d021      	beq.n	80016a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001664:	f7ff f99a 	bl	800099c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	429a      	cmp	r2, r3
 8001672:	d302      	bcc.n	800167a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d116      	bne.n	80016a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f043 0220 	orr.w	r2, r3, #32
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e007      	b.n	80016b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d1ca      	bne.n	800164c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d6:	d11b      	bne.n	8001710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2220      	movs	r2, #32
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f043 0204 	orr.w	r2, r3, #4
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e26c      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8087 	beq.w	800184a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800173c:	4b92      	ldr	r3, [pc, #584]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b04      	cmp	r3, #4
 8001746:	d00c      	beq.n	8001762 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001748:	4b8f      	ldr	r3, [pc, #572]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d112      	bne.n	800177a <HAL_RCC_OscConfig+0x5e>
 8001754:	4b8c      	ldr	r3, [pc, #560]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d10b      	bne.n	800177a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001762:	4b89      	ldr	r3, [pc, #548]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d06c      	beq.n	8001848 <HAL_RCC_OscConfig+0x12c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d168      	bne.n	8001848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e246      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x76>
 8001784:	4b80      	ldr	r3, [pc, #512]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a7f      	ldr	r2, [pc, #508]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e02e      	b.n	80017f0 <HAL_RCC_OscConfig+0xd4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x98>
 800179a:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7a      	ldr	r2, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b78      	ldr	r3, [pc, #480]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a77      	ldr	r2, [pc, #476]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e01d      	b.n	80017f0 <HAL_RCC_OscConfig+0xd4>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0xbc>
 80017be:	4b72      	ldr	r3, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a71      	ldr	r2, [pc, #452]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6e      	ldr	r2, [pc, #440]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0xd4>
 80017d8:	4b6b      	ldr	r3, [pc, #428]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a6a      	ldr	r2, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b68      	ldr	r3, [pc, #416]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a67      	ldr	r2, [pc, #412]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f8d0 	bl	800099c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff f8cc 	bl	800099c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1fa      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b5d      	ldr	r3, [pc, #372]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0xe4>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f8bc 	bl	800099c <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff f8b8 	bl	800099c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e1e6      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x10c>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d063      	beq.n	800191e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001856:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b08      	cmp	r3, #8
 800186c:	d11c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x18c>
 800186e:	4b46      	ldr	r3, [pc, #280]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x176>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e1ba      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4939      	ldr	r1, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	e03a      	b.n	800191e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff f871 	bl	800099c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff f86d 	bl	800099c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e19b      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4927      	ldr	r1, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f850 	bl	800099c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff f84c 	bl	800099c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e17a      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d03a      	beq.n	80019a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d019      	beq.n	8001966 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff f830 	bl	800099c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff f82c 	bl	800099c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e15a      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800195e:	2001      	movs	r0, #1
 8001960:	f000 fac6 	bl	8001ef0 <RCC_Delay>
 8001964:	e01c      	b.n	80019a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff f816 	bl	800099c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001972:	e00f      	b.n	8001994 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff f812 	bl	800099c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d908      	bls.n	8001994 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e140      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	42420000 	.word	0x42420000
 8001990:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	4b9e      	ldr	r3, [pc, #632]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e9      	bne.n	8001974 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a6 	beq.w	8001afa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b97      	ldr	r3, [pc, #604]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10d      	bne.n	80019da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b94      	ldr	r3, [pc, #592]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a93      	ldr	r2, [pc, #588]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b91      	ldr	r3, [pc, #580]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b8e      	ldr	r3, [pc, #568]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b8b      	ldr	r3, [pc, #556]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a8a      	ldr	r2, [pc, #552]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7fe ffd3 	bl	800099c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fa:	f7fe ffcf 	bl	800099c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b64      	cmp	r3, #100	; 0x64
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0fd      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b81      	ldr	r3, [pc, #516]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x312>
 8001a20:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	e02d      	b.n	8001a8a <HAL_RCC_OscConfig+0x36e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x334>
 8001a36:	4b76      	ldr	r3, [pc, #472]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a75      	ldr	r2, [pc, #468]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a72      	ldr	r2, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	e01c      	b.n	8001a8a <HAL_RCC_OscConfig+0x36e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b05      	cmp	r3, #5
 8001a56:	d10c      	bne.n	8001a72 <HAL_RCC_OscConfig+0x356>
 8001a58:	4b6d      	ldr	r3, [pc, #436]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a6c      	ldr	r2, [pc, #432]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a69      	ldr	r2, [pc, #420]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	e00b      	b.n	8001a8a <HAL_RCC_OscConfig+0x36e>
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a66      	ldr	r2, [pc, #408]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	4b64      	ldr	r3, [pc, #400]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a63      	ldr	r2, [pc, #396]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d015      	beq.n	8001abe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a92:	f7fe ff83 	bl	800099c <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7fe ff7f 	bl	800099c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0ab      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab0:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0ee      	beq.n	8001a9a <HAL_RCC_OscConfig+0x37e>
 8001abc:	e014      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7fe ff6d 	bl	800099c <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7fe ff69 	bl	800099c <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e095      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001adc:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1ee      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d105      	bne.n	8001afa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aee:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a47      	ldr	r2, [pc, #284]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8081 	beq.w	8001c06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b04:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d061      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d146      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b18:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <HAL_RCC_OscConfig+0x4fc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7fe ff3d 	bl	800099c <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7fe ff39 	bl	800099c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e067      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d108      	bne.n	8001b60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	492d      	ldr	r1, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a19      	ldr	r1, [r3, #32]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	430b      	orrs	r3, r1
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x4fc>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe ff0d 	bl	800099c <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7fe ff09 	bl	800099c <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e037      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46a>
 8001ba4:	e02f      	b.n	8001c06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_RCC_OscConfig+0x4fc>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe fef6 	bl	800099c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7fe fef2 	bl	800099c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e020      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x498>
 8001bd2:	e018      	b.n	8001c06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e013      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40007000 	.word	0x40007000
 8001c18:	42420060 	.word	0x42420060

08001c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0d0      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d910      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 0207 	bic.w	r2, r3, #7
 8001c46:	4965      	ldr	r1, [pc, #404]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b8      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	494d      	ldr	r1, [pc, #308]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d040      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d115      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e07f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e073      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06b      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfa:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f023 0203 	bic.w	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4936      	ldr	r1, [pc, #216]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d0c:	f7fe fe46 	bl	800099c <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d14:	f7fe fe42 	bl	800099c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e053      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 020c 	and.w	r2, r3, #12
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1eb      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d210      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4922      	ldr	r1, [pc, #136]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e032      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4916      	ldr	r1, [pc, #88]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001daa:	f000 f821 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001dae:	4601      	mov	r1, r0
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	fa21 f303 	lsr.w	r3, r1, r3
 8001dc2:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1cc>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1d0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fda4 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08002528 	.word	0x08002528
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	b490      	push	{r4, r7}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df8:	1d3c      	adds	r4, r7, #4
 8001dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e00:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e1a:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x46>
 8001e2e:	e02d      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e32:	623b      	str	r3, [r7, #32]
      break;
 8001e34:	e02d      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	0c9b      	lsrs	r3, r3, #18
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e42:	4413      	add	r3, r2
 8001e44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0c5b      	lsrs	r3, r3, #17
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e62:	4413      	add	r3, r2
 8001e64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e6e:	fb02 f203 	mul.w	r2, r2, r3
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	e004      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	623b      	str	r3, [r7, #32]
      break;
 8001e8a:	e002      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e8e:	623b      	str	r3, [r7, #32]
      break;
 8001e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e92:	6a3b      	ldr	r3, [r7, #32]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc90      	pop	{r4, r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	08002514 	.word	0x08002514
 8001ea4:	08002524 	.word	0x08002524
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	007a1200 	.word	0x007a1200
 8001eb0:	003d0900 	.word	0x003d0900

08001eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff2 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08002538 	.word	0x08002538

08001ef0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <RCC_Delay+0x34>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <RCC_Delay+0x38>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0a5b      	lsrs	r3, r3, #9
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f0c:	bf00      	nop
  }
  while (Delay --);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	60fa      	str	r2, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f9      	bne.n	8001f0c <RCC_Delay+0x1c>
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000000 	.word	0x20000000
 8001f28:	10624dd3 	.word	0x10624dd3

08001f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e041      	b.n	8001fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fc86 	bl	8000864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f000 f930 	bl	80021d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d001      	beq.n	8001fe4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e032      	b.n	800204a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_TIM_Base_Start+0x88>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00e      	beq.n	8002014 <HAL_TIM_Base_Start+0x48>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffe:	d009      	beq.n	8002014 <HAL_TIM_Base_Start+0x48>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_TIM_Base_Start+0x8c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d004      	beq.n	8002014 <HAL_TIM_Base_Start+0x48>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a13      	ldr	r2, [pc, #76]	; (800205c <HAL_TIM_Base_Start+0x90>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d111      	bne.n	8002038 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b06      	cmp	r3, #6
 8002024:	d010      	beq.n	8002048 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002036:	e007      	b.n	8002048 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	40012c00 	.word	0x40012c00
 8002058:	40000400 	.word	0x40000400
 800205c:	40000800 	.word	0x40000800

08002060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_TIM_ConfigClockSource+0x18>
 8002074:	2302      	movs	r3, #2
 8002076:	e0a6      	b.n	80021c6 <HAL_TIM_ConfigClockSource+0x166>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002096:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800209e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d067      	beq.n	8002180 <HAL_TIM_ConfigClockSource+0x120>
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d80b      	bhi.n	80020cc <HAL_TIM_ConfigClockSource+0x6c>
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d073      	beq.n	80021a0 <HAL_TIM_ConfigClockSource+0x140>
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d802      	bhi.n	80020c2 <HAL_TIM_ConfigClockSource+0x62>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d06f      	beq.n	80021a0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80020c0:	e078      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d06c      	beq.n	80021a0 <HAL_TIM_ConfigClockSource+0x140>
 80020c6:	2b30      	cmp	r3, #48	; 0x30
 80020c8:	d06a      	beq.n	80021a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80020ca:	e073      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020cc:	2b70      	cmp	r3, #112	; 0x70
 80020ce:	d00d      	beq.n	80020ec <HAL_TIM_ConfigClockSource+0x8c>
 80020d0:	2b70      	cmp	r3, #112	; 0x70
 80020d2:	d804      	bhi.n	80020de <HAL_TIM_ConfigClockSource+0x7e>
 80020d4:	2b50      	cmp	r3, #80	; 0x50
 80020d6:	d033      	beq.n	8002140 <HAL_TIM_ConfigClockSource+0xe0>
 80020d8:	2b60      	cmp	r3, #96	; 0x60
 80020da:	d041      	beq.n	8002160 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80020dc:	e06a      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e2:	d066      	beq.n	80021b2 <HAL_TIM_ConfigClockSource+0x152>
 80020e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e8:	d017      	beq.n	800211a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80020ea:	e063      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6899      	ldr	r1, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f000 f941 	bl	8002382 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800210e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]
      break;
 8002118:	e04c      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f000 f92a 	bl	8002382 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800213c:	609a      	str	r2, [r3, #8]
      break;
 800213e:	e039      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	461a      	mov	r2, r3
 800214e:	f000 f8a1 	bl	8002294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2150      	movs	r1, #80	; 0x50
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f8f8 	bl	800234e <TIM_ITRx_SetConfig>
      break;
 800215e:	e029      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	461a      	mov	r2, r3
 800216e:	f000 f8bf 	bl	80022f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2160      	movs	r1, #96	; 0x60
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f8e8 	bl	800234e <TIM_ITRx_SetConfig>
      break;
 800217e:	e019      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	461a      	mov	r2, r3
 800218e:	f000 f881 	bl	8002294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	4618      	mov	r0, r3
 800219a:	f000 f8d8 	bl	800234e <TIM_ITRx_SetConfig>
      break;
 800219e:	e009      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f000 f8cf 	bl	800234e <TIM_ITRx_SetConfig>
        break;
 80021b0:	e000      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80021b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a29      	ldr	r2, [pc, #164]	; (8002288 <TIM_Base_SetConfig+0xb8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00b      	beq.n	8002200 <TIM_Base_SetConfig+0x30>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ee:	d007      	beq.n	8002200 <TIM_Base_SetConfig+0x30>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a26      	ldr	r2, [pc, #152]	; (800228c <TIM_Base_SetConfig+0xbc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <TIM_Base_SetConfig+0x30>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a25      	ldr	r2, [pc, #148]	; (8002290 <TIM_Base_SetConfig+0xc0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d108      	bne.n	8002212 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <TIM_Base_SetConfig+0xb8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00b      	beq.n	8002232 <TIM_Base_SetConfig+0x62>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d007      	beq.n	8002232 <TIM_Base_SetConfig+0x62>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a19      	ldr	r2, [pc, #100]	; (800228c <TIM_Base_SetConfig+0xbc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_Base_SetConfig+0x62>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a18      	ldr	r2, [pc, #96]	; (8002290 <TIM_Base_SetConfig+0xc0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a07      	ldr	r2, [pc, #28]	; (8002288 <TIM_Base_SetConfig+0xb8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d103      	bne.n	8002278 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	615a      	str	r2, [r3, #20]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40000400 	.word	0x40000400
 8002290:	40000800 	.word	0x40000800

08002294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f023 0201 	bic.w	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f023 030a 	bic.w	r3, r3, #10
 80022d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	621a      	str	r2, [r3, #32]
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 0210 	bic.w	r2, r3, #16
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800231a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	031b      	lsls	r3, r3, #12
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800232c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	621a      	str	r2, [r3, #32]
}
 8002344:	bf00      	nop
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	f043 0307 	orr.w	r3, r3, #7
 8002370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	609a      	str	r2, [r3, #8]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002382:	b480      	push	{r7}
 8002384:	b087      	sub	sp, #28
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800239c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	021a      	lsls	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	609a      	str	r2, [r3, #8]
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e046      	b.n	8002466 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a16      	ldr	r2, [pc, #88]	; (8002470 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d009      	beq.n	800243a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10c      	bne.n	8002454 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4313      	orrs	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40000400 	.word	0x40000400
 8002478:	40000800 	.word	0x40000800

0800247c <__libc_init_array>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	2500      	movs	r5, #0
 8002480:	4e0c      	ldr	r6, [pc, #48]	; (80024b4 <__libc_init_array+0x38>)
 8002482:	4c0d      	ldr	r4, [pc, #52]	; (80024b8 <__libc_init_array+0x3c>)
 8002484:	1ba4      	subs	r4, r4, r6
 8002486:	10a4      	asrs	r4, r4, #2
 8002488:	42a5      	cmp	r5, r4
 800248a:	d109      	bne.n	80024a0 <__libc_init_array+0x24>
 800248c:	f000 f822 	bl	80024d4 <_init>
 8002490:	2500      	movs	r5, #0
 8002492:	4e0a      	ldr	r6, [pc, #40]	; (80024bc <__libc_init_array+0x40>)
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <__libc_init_array+0x44>)
 8002496:	1ba4      	subs	r4, r4, r6
 8002498:	10a4      	asrs	r4, r4, #2
 800249a:	42a5      	cmp	r5, r4
 800249c:	d105      	bne.n	80024aa <__libc_init_array+0x2e>
 800249e:	bd70      	pop	{r4, r5, r6, pc}
 80024a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024a4:	4798      	blx	r3
 80024a6:	3501      	adds	r5, #1
 80024a8:	e7ee      	b.n	8002488 <__libc_init_array+0xc>
 80024aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ae:	4798      	blx	r3
 80024b0:	3501      	adds	r5, #1
 80024b2:	e7f2      	b.n	800249a <__libc_init_array+0x1e>
 80024b4:	08002540 	.word	0x08002540
 80024b8:	08002540 	.word	0x08002540
 80024bc:	08002540 	.word	0x08002540
 80024c0:	08002544 	.word	0x08002544

080024c4 <memset>:
 80024c4:	4603      	mov	r3, r0
 80024c6:	4402      	add	r2, r0
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d100      	bne.n	80024ce <memset+0xa>
 80024cc:	4770      	bx	lr
 80024ce:	f803 1b01 	strb.w	r1, [r3], #1
 80024d2:	e7f9      	b.n	80024c8 <memset+0x4>

080024d4 <_init>:
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	bf00      	nop
 80024d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024da:	bc08      	pop	{r3}
 80024dc:	469e      	mov	lr, r3
 80024de:	4770      	bx	lr

080024e0 <_fini>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	bf00      	nop
 80024e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e6:	bc08      	pop	{r3}
 80024e8:	469e      	mov	lr, r3
 80024ea:	4770      	bx	lr
